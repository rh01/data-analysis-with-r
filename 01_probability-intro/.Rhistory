install.packages("openxlsx")
install.packages("openxlsx")
library("openxlsx")
install.packages("stringr")
library(stringr)
#------------------------------------------------
#读取excel数据
#------------------------------------------------
readFilePath <- "C:/朝阳医院2016年销售数据.xlsx"
excelData <- read.xlsx(readFilePath,"Sheet1")
readFilePath <- "/home/shine/Desktop/朝阳医院2016年销售数据.xlsx"
readFilePath <- "/home/shine/Desktop/朝阳医院2016年销售数据.xlsx"
excelData <- read.xlsx(readFilePath,"Sheet1")
#step1:列名重命名
names(excelData) <- c("time","cardno",
"drugId","drugName",
"saleNumber","virtualmoney",
"actualmoney")
#ste2:删除缺失数据
excelData <- excelData[!is.na(excelData$time),]
#step3:处理日期
timeSplit <- str_split_fixed(excelData$time, " ",n=2)
excelData$time <-timeSplit[,1]
#字符串转换为日期格式
excelData$time <- as.Date(excelData$time,
"%Y-%m-%d")
#step4:数据类型转换
#销售数量
excelData$saleNumber <- as.numeric(excelData$saleNumber)
#应收金额（打折前的金额）
excelData$virtualmoney <- as.numeric(excelData$virtualmoney)
#实收金额（打折后的金额）
excelData$actualmoney <- as.numeric(excelData$actualmoney)
#step5:数据排序
#按销售时间对数据进行升序排序
excelData <- excelData[order(excelData$time,
decreasing = FALSE),]
kpi1 <- excelData[!duplicated(
excelData[,c("time","cardno")]
),]
#总消费次数
consumeNumber <- nrow(kpi1)
#最小的时间值
startTime <- kpi1$time[1]
#最大的时间值
endTime <- kpi1$time[nrow(kpi1)]
#天数
day <- as.numeric(endTime -startTime)
#月份数
#如果你想计算的更准确，可以将一个月有31天或者28天的情况也考虑进去。这里为了简单说明计算方式，没有考虑复杂的情况。
month <- day %/% 30
#月均消费次数
monthConsume <- consumeNumber / month
monthConsume <- format(round(monthConsume, 2), nsmall = 2)
#-------------------------------------------------------
# 业务指标2：月均消费金额
#-------------------------------------------------------
totalMoney <- sum(excelData$actualmoney,na.rm=TRUE)
monthMoney <- totalMoney / month
pct <- totalMoney / consumeNumber
pct <- format(round(pct, 2), nsmall = 2)
#-------------------------------------------------------
# 业务指标4：消费曲线图
#-------------------------------------------------------
week <- tapply(excelData$actualmoney,
format(excelData$time, "%Y-%U"),
sum)
week <- as.data.frame.table(week)
names(week) <- c("time","actualmoney")
week$time <- as.character(week$time)
week$timeNumber <- c(1:nrow(week))
plot(week$timeNumber, week$actualmoney,
xlab="时间（年份-第几周）",
ylab="消费金额",
xaxt = "n",
main= "2016年朝阳医院消费曲线",
col="blue",
type="b")
axis(1,at=week$timeNumber, labels=week$time, cex.axis = 1.5)
# generate random seed for repreduced
set.seed(20170912)
# load data from specific data
data(ames)
# load data from specific data
data("ames")
# load data from specific data
data(ames)
# generate random seed for repreduced
set.seed(20170912)
# load library
library(ggplot2)
library(dplyr)
library(statsr)
# load data from specific data
data(ames)
#
n <-60
samp <- sample_n(ames, n)
samp
# Confidence intervals
samp
# set random seed to reproduce your results
set.seed(20171016)
# load librarys
library(statsr)
library(ggplot2)
library(dplyr)
# load data that
data("ames")
dim(ames)
names(ames)
ggplot(data = ames,
aes(x=area)) + geom_histogram(binwidth = 250)
ames %>%
summarise(mu = mean(area), pop_medp_iqr=IQR(area),
pop_min=min(area), p = median(area),
sigma = sd(area), poop_max = max(area),
pop_q1 = quantile(area, 0.25),
pop_q3 = quantile(area, 0.75))
# get a simple random sample size 50 from population
samp1 <- ames %>%
sample_n(size = 50)
ggplot(data = samp1,
aes(x = area)) + geom_histogram()
samp1 %>%
summarise(x_bar = mean(area))
# q2
ames%>%
sample_n(size = 100) %>%
summarise(x_bar = mean(area))
ames %>%
sample_n(size=1000) %>%
summarise(x_bar = mean(area))
samp_100 %>%
summarise(x_bar = mean(area))
samp_1000 %>%
summarise(x_bar = mean(area))
# samp_100 %>%
#   summarise(x_bar = mean(area))
#
#
# samp_1000 %>%
#   summarise(x_bar = mean(area))
# samp_100 %>%
#   summarise(x_bar = mean(area))
#
#
# samp_1000 %>%
#   summarise(x_bar = mean(area))
# samp_100 %>%
#   summarise(x_bar = mean(area))
#
#
# samp_1000 %>%
#   summarise(x_bar = mean(area))
# samp_100 %>%
#   summarise(x_bar = mean(area))
#
#
# samp_1000 %>%
#   summarise(x_bar = mean(area))
ames %>%
sample_n(size = 50) %>%
summarise(x_bar = mean(area))
# repeat sampleing
# rep 15000 times and with replacement
# take 15,000 samples of size 50
sample_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE)  %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x=x_bar)) + geom_histogram(binwidth = 20)
dim(sample_means50)
# Exercise: How many elements are there
# in sample_means50? Describe the sampling
# distribution, and be sure to specifically
# note its center. Make sure to include a
# plot of the distribution in your answer.
sample_means50 %>%
summarise(count = n(), x_bar = mean(x_bar),
s = sd(x_bar, na.rm = TRUE), pop_med = median(x_bar),
pop_iqr = IQR(x_bar), pop_min = min(x_bar),
pop_max = max(x_bar),
pop_q1 = quantile(x_bar, 0.25),
pop_q3 = quantile(x_bar, 0.75))
sample_means_small <- ames %>%
rep_sample_n(size = 10, reps = 25) %>%
summarise(x_bar = mean(area))
dim(sample_means_small)
sample_means_small %>%
summarise(count = n())
ggplot(data = sample_means_small, aes(x = x_bar)) + geom_histogram(binwidth = 60)
# generate random seed for repreduced
set.seed(20170912)
# load library
library(ggplot2)
library(dplyr)
library(statsr)
# load data from specific data
data(ames)
#
n <-60
samp <- sample_n(ames, n)
# Confidence intervals
samp
# Confidence intervals
samp %>%
summarise(x_bar = mean(area))
pop_q3 = quantile(area, 0.75))
# Confidence intervals
samp %>%
summarise(x_bar = mean(area))
# Confidence intervals
samp %>%
summarise(x_bar = mean(area), count = n())
z_star_95 <- qnorm(0.025)
z_star_95
# for example. I can compute the critucl value for a 95% confidence interal using
z_star_95  = qnorm(0.025)
z_star_95
# or
z_star_95_2 = qnorm(0.975)
z_star_95_2
samp %>%
summarise(lower = mean(area) - z_star_95_2*sd(area)/sqrt(n()),
upper = mean(area) + z_star_95_2*sd(area)/sqrt(n()))
# Confidence intervals
samp %>%
summarise(x_bar = mean(area), count = n())
params <- ames %>%
summarise(mu = mean(area))
params
ci %>%
slice(1:5)
ci < ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_95_2*sd(area)/sqrt(n()),
upper = mean(area) + z_star_95_2*sd(area)/sqrt(n()))
ci < ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_95_2*sd(area)/sqrt(n()),
upper = mean(area) + z_star_95_2*sd(area)/sqrt(n()))
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_95_2*sd(area)/sqrt(n()),
upper = mean(area) + z_star_95_2*sd(area)/sqrt(n()))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(
lower < params$mu & upper > params$mu, "yes", "no"
))
View(ci)
ci_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci%capture_mu)
)
ci_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu)
)
ggplot(data = ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) + geom_point(size = 2) + geom_line() + geom_vline(xintercept = params$mu, color="darkgray")
qnorm(0.995)
z_star_99 = qnorm(0.995)
ci99 <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lowwer = mean(area) - z_star_99*sd(area)/sqrt(n()),
upper = mean(area) + z_star_99*sd(area)/sqrt(n()))
ci99 <- ci99 %>%
slice(1:5)
ci99# qnorm(0.995)
param99 <- ames %>%
summarise(mu = mean(area))
# create new variable
ci99  <- ci99 %>%
mutate(capture_mu = ifelse(param99$mu > lowwer & param99$mu < upper, "yes", "no"))
ci99
ci99_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci99$lower, ci99$upper),
capture_mu = c(ci99$capture_mu, ci$99capture_mu)
)
ci99_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci99$lower, ci99$upper),
capture_mu = c(ci99$capture_mu, ci$99capture_mu)
)
99
ci99_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci99$lower, ci99$upper),
capture_mu = c(ci99$capture_mu, ci99$capture_mu)
)
ci99_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci99$lowwer, ci99$upper),
capture_mu = c(ci99$capture_mu, ci99$capture_mu)
)
ggplot(data = ci99_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) + geom_point(size = 2) + geom_line() + geom_vline(xintercept = params$mu, color="darkgray")
ggplot(data = ci99_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) + geom_point(size = 2) + geom_line() + geom_vline(xintercept = params99$mu, color="darkgray")
ggplot(data = ci99_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) + geom_point(size = 2) + geom_line() + geom_vline(xintercept = param99$mu, color="darkgray")
ggplot(data = ci99_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) + geom_point(size = 2) + geom_line() + geom_vline(xintercept = param99$mu, color="darkgray")
ci99 <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_99*sd(area)/sqrt(n()),
upper = mean(area) + z_star_99*sd(area)/sqrt(n()))
ci99 <- ci99 %>%
slice(1:5)
ci99
# create new variable
ci99  <- ci99 %>%
mutate(capture_mu = ifelse(param99$mu > lower & param99$mu < upper, "yes", "no"))
ci99
ci99_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci99$lower, ci99$upper),
capture_mu = c(ci99$capture_mu, ci99$capture_mu)
)
ggplot(data = ci99_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) + geom_point(size = 2) + geom_line() + geom_vline(xintercept = param99$mu, color="darkgray")
params99 <- ames %>%
summarise(mu = mean(area))
z_star_99 = qnorm(0.995)
ci99 <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_99*sd(area)/sqrt(n()),
upper = mean(area) + z_star_99*sd(area)/sqrt(n()))
ci99 <- ci99 %>%
slice(1:5)
ci99
# create new variable
ci99  <- ci99 %>%
mutate(capture_mu = ifelse(params99$mu > lower & params99$mu < upper, "yes", "no"))
ci99
ci99_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci99$lower, ci99$upper),
capture_mu = c(ci99$capture_mu, ci99$capture_mu)
)
ggplot(data = ci99_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) + geom_point(size = 2) + geom_line() + geom_vline(xintercept = params99$mu, color="darkgray")
samp %>%
summarise(lower = mean(area) - z_star_95_2*sd(area)/sqrt(n()),
upper = mean(area) + z_star_95_2*sd(area)/sqrt(n()))
params <- ames %>%
summarise(mu = mean(area))
params
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_95_2*sd(area)/sqrt(n()),
upper = mean(area) + z_star_95_2*sd(area)/sqrt(n()))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(
lower < params$mu & upper > params$mu, "yes", "no"
))
ci_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu)
)
ggplot(data = ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) + geom_point(size = 2) + geom_line() + geom_vline(xintercept = params$mu, color="darkgray")
params99 <- ames %>%
summarise(mu = mean(area))
params99
z_star_99 = qnorm(0.995)
z_star_99
ci99 <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_99*sd(area)/sqrt(n()),
upper = mean(area) + z_star_99*sd(area)/sqrt(n()))
ci99 %>%
slice(1:5)
# create new variable
ci99  <- ci99 %>%
mutate(capture_mu = ifelse(params99$mu > lower & params99$mu < upper, "yes", "no"))
ci99
ci99_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci99$lower, ci99$upper),
capture_mu = c(ci99$capture_mu, ci99$capture_mu)
)
ggplot(data = ci99_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) + geom_point(size = 2) + geom_line() + geom_vline(xintercept = params99$mu, color="darkgray")
300/25
ci99_data  <- data.frame(
ci_id = c(1:50, 1:50),
ci_bounds = c(ci99$lower, ci99$upper),
capture_mu = c(ci99$capture_mu, ci99$capture_mu)
)
qnorm(0.025)
View(params)
qnorm(0.975)
25 / qnorm(0.975)
300 *qnorm(0.975) /25
300 *qnorm(0.975) /25 ^2
300 *qnorm(0.975) /25 ** 2
300 *qnorm(0.975) /25
23.51957 * 23.51957
4.31/sqrt(10)
17 / sqrt(35)
4 * sqrt(35) / 17
qnorm(0.16)
qnorm(0.08)
qnorm(0.01)
300 /40
7.5 * 7.5
qnorm(0.01)
qnorm(0.01)*-1
qnorm(0.01)*-1 * 300 / 40
17.44761*17.44761
# load data
data(nc)
library(ggplot2)
library(dplyr)
library(statsr)
# load data
data(nc)
# EDA
str(nc)
names(nc)
dim(nc)
dim(nc)[1]
summary(nc$gained)
ggplot(data = nc, aes(x = nc$gained)) + geom_histogram()
ggplot(data = nc, aes(x = nc$gained)) + geom_histogram(binwidth = 20)
ggplot(data = nc, aes(x = nc$gained)) + geom_histogram(binwidth = 10)
summary(nc$gained)
ggplot(data = nc, aes(x = nc$gained)) + geom_histogram(binwidth = 10)
ggplot(data = nc, aes(x = habit, y = weight)) + geom_boxplot()
library(ggplot2)
library(dplyr)
library(statsr)
# load data
data(nc)
# EDA
str(nc)
names(nc)
dim(nc)[1]
summary(nc$gained)
ggplot(data = nc, aes(x = habit, y = weight)) + geom_boxplot()
ggplot(data = nc, aes(x = habit, y = weight)) + geom_boxplot(outlier.color = "red")
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker", "nonsmoker"))
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker", "nonsmoker"))
setwd("~/Documents/stat_with_r/01_probability-intro")
# new a seed
set.seed(20171020)
library(ggplot2)
library(dplyr)
library(statsr)
# load data
data(nc)
# EDA
str(nc)
names(nc)
dim(nc)[1]
summary(nc$gained)
ggplot(data = nc, aes(x = habit, y = weight)) + geom_boxplot(outlier.color = "red")
ggplot(data = nc, aes(x = habit, y = weight)) + geom_boxplot(outlier.color = "red")
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weightm))
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker", "nonsmoker"))
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker", "nonsmoker"), sig_level = 0.99)
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker", "nonsmoker"), conf_level = 0,99
)
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker", "nonsmoker"), conf_level = 0,99
)
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker", "nonsmoker"), conf_level = 0.99
)
inference(y = premie, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker", "nonsmoker"), conf_level = 0.99
)
inference(y = weeks, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker", "nonsmoker"), conf_level = 0.99
)
